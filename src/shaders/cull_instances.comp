#include "common/bindings.glsl"
#include "common/culling.glsl"
#include "common/util.glsl"

layout(local_size_x = 64) in;

void cull_instances() {
    uint32_t instance_index = gl_GlobalInvocationID.x;

    if (instance_index >= get_uniforms().num_instances) {
        return;
    }

    Instance instance =
        InstanceBuffer(get_uniforms().instances).instances[instance_index];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    if (cull_bounding_sphere(instance, mesh_info.bounding_sphere)) {
        return;
    }

    uint8_t lod_level = uint8_t(1);

    LodLevelBuffer(get_uniforms().lod_levels).lod_levels[instance_index] = lod_level;

    prefix_sum_inclusive_append(
        PrefixSumBuffer(get_uniforms().num_meshlets_prefix_sum),
        instance_index,
        mesh_info.lods[lod_level].num_meshlets
    );
}

layout(local_size_x = 16, local_size_y = 4) in;

void cull_instances_shadows() {
    uint32_t instance_index = gl_GlobalInvocationID.x;
    uint32_t cascade_index = gl_GlobalInvocationID.y;

    if (instance_index >= get_uniforms().num_instances) {
        return;
    }

    Instance instance =
        InstanceBuffer(get_uniforms().instances).instances[instance_index];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    if (cull_bounding_sphere_shadows(
            instance,
            mesh_info.bounding_sphere,
            cascade_index
        )) {
        return;
    }

    uint8_t lod_level = uint8_t(1);

    LodLevelBuffer(get_uniforms().lod_levels).lod_levels[instance_index] = lod_level;

    prefix_sum_inclusive_append(
        prefix_sum_buffer_for_cascade(cascade_index),
        instance_index,
        mesh_info.lods[lod_level].num_meshlets
    );
}
