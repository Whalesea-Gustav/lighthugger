#include "common/bindings.glsl"

layout(local_size_x = 64) in;

void main() {
    uint32_t id = gl_GlobalInvocationID.x;

    if (id >= uniforms.num_instances) {
        return;
    }

    Instance instance = InstanceBuffer(uniforms.instances).instances[id];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    uint32_t meshlets_offset = atomicAdd(
        MiscStorageBuffer(uniforms.misc_storage)
            .misc_storage.num_expanded_meshlets,
        mesh_info.num_meshlets
    );

    MeshletIndexBuffer buf = MeshletIndexBuffer(uniforms.meshlet_indices);

    for (uint16_t i = uint16_t(0u); i < mesh_info.num_meshlets; i++) {
        MeshletIndex index;
        index.instance_index = id;
        index.meshlet_index = i;
        buf.meshlet_index[meshlets_offset + i] = index;
    }
}
