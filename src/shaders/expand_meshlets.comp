#include "common/bindings.glsl"
#include "common/culling.glsl"

layout(local_size_x = 64) in;

void main() {
    uint32_t id = global_id.x;

    if (id >= uniforms.num_instances) {
        return;
    }

    Instance instance = instances[id];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    if (cull_bounding_sphere(instance, mesh_info.bounding_sphere)) {
        return;
    }

    uint32_t meshlets_offset = atomicAdd(misc_storage.num_expanded_meshlets, mesh_info.num_meshlets);

    MeshletIndexBuffer buf = MeshletIndexBuffer(uniforms.expanded_meshlets);

    for (uint32_t i = 0; i < mesh_info.num_meshlets; i++) {
        MeshletIndex index;
        index.instance_index = id;
        index.meshlet_index = i;
        buf.meshlet_index[meshlets_offset + i] = index;
    }
}
