#include "common/bindings.glsl"
#include "common/culling.glsl"

layout(local_size_x = 64) in;

void main() {
    uint32_t id = global_id.x;

    if (id >= misc_storage.num_expanded_meshlets) {
        return;
    }

    MeshletIndex meshlet_index = MeshletIndexBuffer(uniforms.expanded_meshlets).meshlet_index[id];

    Instance instance = instances[meshlet_index.instance_index];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    Meshlet meshlet = MeshletBuffer(mesh_info.meshlets).meshlets[meshlet_index.meshlet_index];

    if (cull_bounding_sphere(instance, meshlet.bounding_sphere)) {
        return;
    }

    if (cull_cone_perspective(instance, meshlet)) {
        return;
    }

    uint meshlet_offset;
    uint draw_call = 0;

    if (bool(mesh_info.flags & MESH_INFO_FLAGS_ALPHA_CLIP)) {
        meshlet_offset = ALPHA_CLIP_DRAWS_OFFSET + atomicAdd(misc_storage.num_alpha_clip_meshlets, 1);
        draw_call = 1;
    } else {
        meshlet_offset = atomicAdd(misc_storage.num_opaque_meshlets, 1);
    }

    atomicAdd(draw_calls[draw_call].vertexCount, MAX_MESHLET_VERTICES);
    draw_calls[0].instanceCount = 1;
    draw_calls[0].firstVertex = 0;
    draw_calls[0].firstInstance = 0;

    draw_calls[1].instanceCount = 1;
    draw_calls[1].firstVertex = 0;
    draw_calls[1].firstInstance = 0;

    MeshletIndexBuffer(uniforms.instance_meshlets).meshlet_index[meshlet_offset] = meshlet_index;
}
