#include "common/bindings.glsl"
#include "common/culling.glsl"

layout(local_size_x = 64) in;

void main() {
    uint32_t id = gl_GlobalInvocationID.x;

    if (id >= MiscStorageBuffer(uniforms.misc_storage).misc_storage.num_expanded_meshlets) {
        return;
    }

    MeshletIndex meshlet_index =
        MeshletIndexBuffer(uniforms.expanded_meshlets).meshlet_index[id];

    Instance instance = InstanceBuffer(uniforms.instances).instances[meshlet_index.instance_index];
    MeshInfo mesh_info = MeshInfoBuffer(instance.mesh_info_address).mesh_info;

    Meshlet meshlet =
        MeshletBuffer(mesh_info.meshlets).meshlets[meshlet_index.meshlet_index];

    if (cull_bounding_sphere(instance, meshlet.bounding_sphere)) {
        return;
    }

    if (cull_cone_perspective(instance, meshlet)) {
        return;
    }

    uint meshlet_offset;

    DrawCallBuffer draw_call_buffer = DrawCallBuffer(uniforms.draw_calls);

    if (bool(mesh_info.flags & MESH_INFO_FLAGS_ALPHA_CLIP)) {
        meshlet_offset = ALPHA_CLIP_DRAWS_OFFSET
            + atomicAdd(draw_call_buffer.num_alpha_clip, 1);
    } else {
        meshlet_offset = atomicAdd(draw_call_buffer.num_opaque, 1);
    }

    DrawIndirectCommand draw_call;
    draw_call.vertexCount = meshlet.triangle_count * 3;
    draw_call.instanceCount = 1;
    draw_call.firstVertex = 0;
    draw_call.firstInstance = meshlet_offset;

    draw_call_buffer.draw_calls[meshlet_offset] = draw_call;

    MeshletIndexBuffer(uniforms.instance_meshlets)
        .meshlet_index[meshlet_offset] = meshlet_index;
}
